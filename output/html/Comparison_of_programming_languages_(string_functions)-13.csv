Format,Languages
<<<<<<< HEAD
string (string'Last - n + 1 .. string'Last),Ada
"Right(string,n)",VB
"RIGHT$(string,n)",BASIC
"right(string,n)","FreeBASIC, Ingres, Pick Basic"
"strcpy(string2, string+n) (n must not be greater than the length of string)",C
string.Substring(string.Length()-n),C#
string[len(string)-n:],Go
string.substring(string.length()-n),Java
string.slice(-n),JavaScript[40]
"right(string,n «,padchar»)","Rexx, Erlang"
"substr(string,-n)","Perl 5, PHP"
"substr(string,*-n) string.substr(*-n)",Raku
string[-n:],"Cobra, Python"
string[n],Pick Basic
(string-take-right string n),Scheme (SRFI 13)
string[-n..-1],"Ruby, Ya"
string[$-n .. $],D[41]
String.sub string (String.length string - n) n,OCaml[24]
"string.sub(string, -n) (string):sub(-n)",Lua
string last: n,"Smalltalk (Squeak, Pharo)"
"StringTake[string, -n]",Mathematica[25]
string (1:n),COBOL
¯n?string.,APL
string[n..] string.get(n..),Rust[26]
=======
"string1 ne string2, or string1 NE string2",ALGOL 68 – note: the operator "ne" is literally in bold type-font.
string1 /= string2,"ALGOL 68, Ada, Erlang, Fortran, Haskell"
string1 <> string2,"BASIC, VB, VB .NET, Pascal, Object Pascal (Delphi), OCaml, PHP, Seed7, Standard ML, F#, COBOL, Cobra, Python 2 (deprecated)"
string1 # string2,BASIC (some implementations)
string1 ne string2,"Perl, Raku"
(string<> string1 string2),Scheme (SRFI 13)
(string/= string1 string2),Common Lisp
(string/= string1 string2),ISLISP
(not= string1 string2),Clojure
string1 != string2,"C++ (STL), C#, Go, JavaScript (not similar), PHP (not similar), Python, Ruby, Rust,[9] Swift, D, Mathematica"
string1 !== string2,"JavaScript, PHP"
string1 \= string2,Rexx
string1 ¬= string2,PL/I
"test string1 != string2, or [ string1 != string2 ]",Bourne Shell
"string1 -ne string2, or -not [string]::Equals(string1, string2)",Windows PowerShell
string1 ~= string2,"Lua, Smalltalk"
string1 ? string2,APL
string1.ne(string2),Rust[9]
>>>>>>> ff4582384893868142f1b485861afa33c91d9c67
