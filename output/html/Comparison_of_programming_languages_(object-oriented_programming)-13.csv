<<<<<<< HEAD
,current object,current object's parent object,null reference,Current Context of Execution
Smalltalk,self,super,nil,thisContext
ABAP Objects,me,super,initial,
APL (Dyalog),?THIS,?BASE,?NULL,
C++ (STL),*this,[40],"NULL, nullptr",
C#,this,base[41],null,
Java,,super[41],,
D,,,,
JavaScript,,super[41] (ECMAScript 6),"null, undefined[42]",
eC,this,,null,
Objective-C,self,super[41],nil,
Swift,self,super[41],nil[43],
Python,self[44],"super(current_class_name, self)[5] super() (3.x only)",None,
Visual Basic .NET,Me,MyBase,Nothing,
Xojo,Me / Self,Parent,Nil,
Eiffel,Current,Precursor «{superclass}» «(args)»[41][45],Void,
PHP,$this,parent[41],null,
Perl,$self[44],$self->SUPER[41],undef,
Raku,self,SUPER,Nil,
Ruby,self,super«(args)»[46],nil,binding
Windows PowerShell,$this,,$NULL,
OCaml,self[47],super[48],N/A[49],
F#,this,base[41],null,
COBOL,SELF,SUPER,NULL,
Cobra,this,base,nil,
=======
,Get object type,Is instance of (includes subtypes),Upcasting,Downcasting,
,,,,Runtime check,No check
ABAP Objects,N/A[71],,=,?=,
C++ (STL),typeid(x),dynamic_cast<type *>(&x) != nullptr,N/A[72],dynamic_cast<type*>(ptr),(type*) ptr or static_cast<type*>(ptr)
C#,x.GetType(),x is type,,(type) x or x as type,
D,typeid(x),,,cast(type) x,
Delphi,,x is type,,x as type,
eC,x._class,"eClass_IsDerived(x._class, type)",,,(type) x
Java,x.getClass(),x instanceof class,,(type) x,
Objective-C (Cocoa),[x class][73],[x isKindOfClass:[class class]],,,(type*) x
Swift,x.dynamicType,x is type,,x as! type x as? type,
JavaScript,x.constructor (If not rewritten.),x instanceof class,N/A[74],,
Visual Basic .NET,x.GetType(),TypeOf x Is type,N/A[72],"CType(x, type) or TryCast(x, type)",
Xojo,Introspection.GetType(x),x IsA type,N/A,"CType(x, type)",N/A
Eiffel,x.generating_type,attached {TYPE} x,attached {TYPE} x as down_x,,
Python,type(x),"isinstance(x, type)",N/A[74],,
PHP,get_class(x),x instanceof class,,,
Perl,ref(x),x->isa("class"),,,
Raku,x.WHAT,x.isa(class),N/A[72],type(x) or x.type,
Ruby,x.class,x.instance_of?(type) or x.kind_of?(type),N/A[74],,
Smalltalk,x class,x isKindOf: class,,,
Windows PowerShell,x.GetType(),x -is [type],N/A[72],[type]x or x -as [type],
OCaml,N/A[75],,(x :> type),N/A,
F#,x.GetType(),x :? type,,(x :?> type),
COBOL,N/A,,x AS type[72],N/A,
>>>>>>> ff4582384893868142f1b485861afa33c91d9c67
