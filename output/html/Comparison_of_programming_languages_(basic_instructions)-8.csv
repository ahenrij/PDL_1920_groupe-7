<<<<<<< HEAD
,if,else if,select case,conditional expression
Ada[1],if condition then statements «else statements» end if,if condition1 then statements elsif condition2 then statements ... «else statements» end if,case expression is when value_list1 => statements when value_list2 => statements ... «when others => statements» end case,(if condition1 then expression1 «elsif condition2 then expression2» ... else expressionn) (case expression is when value_list1 => expression1 when value_list2 => expression2 ... «when others => expressionn» )
Seed7,if condition then statements «else statements» end if,if condition1 then statements elsif condition2 then statements ... «else statements» end if,case expression of when set1 : statements ... «otherwise: statements» end case,
Modula-2,if condition then statements «else statements» end,if condition1 then statements elsif condition2 then statements ... «else statements» end,case expression of caseLabelList : statements | ... «else statements» end,
ALGOL 68,if condition then statements «else statements» fi,if condition then statements elif condition then statements fi,"case switch in statements, statements«,... out statements» esac",( condition | valueIfTrue | valueIfFalse )
ALGOL 68 (brief form),( condition | statements «| statements» ),( condition | statements |: condition |  statements ),"( variable | statements,... «| statements» )",
APL,:If condition instructions «:Else instructions»:EndIf,:If condition instructions :ElseIf condition instructions ... «:Else instructions» :EndIf,:Select expression :Case case1 instructions ... «:Else instructions»:EndSelect,{condition:valueIfTrue ? valueIfFalse}
C (C99) and: Objective-C C++ (STL) D Java JavaScript PHP,if (condition) instructions «else instructions» instructions can be a single statement or a block in the form of: { statements },if (condition) instructions else if (condition) instructions ... «else instructions» if (condition) instructions else { if (condition) instructions },switch (variable) { case case1: instructions «break;» ... «default: instructions»},condition ? valueIfTrue : valueIfFalse
C#,if (condition) instructions «else instructions» instructions can be a single statement or a block in the form of: { statements },if (condition) instructions «else instructions» if (condition) instructions else if (condition) instructions ... «else instructions»,"All non-empty cases must end with a break or goto case statement (that is, they are not allowed to fall-through to the next case). The default case is not required to come last.",condition ? valueIfTrue : valueIfFalse switch (variable) { case case1: instructions «break_or_jump_statement» ... «default: instructions break_or_jump_statement» }
Windows PowerShell,if (condition) instructions «else instructions»,if (condition) { instructions } elseif (condition) { instructions } ... «else { instructions }»,switch (variable) { case1 { instructions «break;» } ... «default { instructions }»},
Go,if condition {instructions} «else {instructions}»,if condition {instructions} else if condition {instructions} ... «else {instructions}» or switch { case condition: instructions ... «default: instructions»},switch variable { case case1: instructions ... «default: instructions»},
Swift,if condition {instructions} «else {instructions}»,if condition {instructions} else if condition {instructions} ... «else {instructions}»,switch variable { case case1: instructions ... «default: instructions»},
Perl,if (condition) {instructions} «else {instructions}» or unless (notcondition) {instructions} «else {instructions}»,if (condition) {instructions} elsif (condition) {instructions} ... «else {instructions}» or unless (notcondition) {instructions} elsif (condition) {instructions} ... «else {instructions}»,use feature "switch"; ... given (variable) { when (case1) { instructions } ... «default { instructions }»},condition ? valueIfTrue : valueIfFalse
Raku,if condition {instructions} «else {instructions}» or unless notcondition {instructions},if condition {instructions} elsif condition {instructions} ... «else {instructions},given variable { when case1 { instructions } ... «default { instructions }»},condition ?? valueIfTrue !! valueIfFalse
Ruby,if condition instructions «else instructions»,if condition instructions elsif condition instructions ... «else instructions» end,case variable when case1 instructions ... «else instructions»end,condition ? valueIfTrue : valueIfFalse
Scala,if (condition) {instructions} «else {instructions}»,if (condition) {instructions} else if (condition) {instructions} ... «else {instructions}»,expression match { case pattern1 => expression case pattern2 => expression ... «case _ => expression»}[b],if (condition) valueIfTrue else valueIfFalse
Smalltalk,condition ifTrue: trueBlock «ifFalse: falseBlock» end,,,condition ifTrue: trueBlock ifFalse: falseBlock
Common Lisp,(when condition instructions) or (unless condition instructions) or (if condition (progn instructions) «(progn instructions)»),(cond (condition1 instructions) (condition2 instructions) ... «(t instructions)»),(case expression (case1 instructions) (case2 instructions) ... «(otherwise instructions)»),(if test then else) (cond (test1 value1) (test2 value2) ...))
Scheme,(when conditioninstructions) or (if condition (begin instructions) «(begin instructions)»),(cond (condition1 instructions) (condition2 instructions) ... «(else instructions)»),(case (variable) ((case1) instructions) ((case2) instructions) ... «(else instructions)»),(if condition valueIfTrue valueIfFalse)
ISLISP,(if condition (progn instructions) «(progn instructions)»),(cond (condition1 instructions) (condition2 instructions) ... «(t instructions)»),(case expression (case1 instructions) (case2 instructions) ... «(t instructions)»),(if condition valueIfTrue valueIfFalse)
Pascal,if condition then begin instructions end «else begin instructionsend»[c],if condition then begin instructions end else if condition then begin instructions end ... «else begin instructions end»[c],case variable of case1: instructions ... «else: instructions»end[c],
Visual Basic,If condition Then instructions «Else instructions»End If Single-line: If we let instructions be: statement : statement : ... If condition Then instructions« Else instructions»,If condition Then instructions ElseIf condition Then instructions ... «Else instructions»End If Single-line: See note about C-like languages; the Else clause of a single-line If statement can contain another single-line If statement.,Select« Case» variable Case case_pattern1 instructions ... «Case Else instructions»End Select,"IIf(condition, valueIfTrue, valueIfFalse)"
Visual Basic .NET,,,,"If(condition, valueIfTrue, valueIfFalse)"
Xojo,,,,
Python [a],if condition : Tab ? instructions «else: Tab ? instructions»,if condition : Tab ? instructions elif condition : Tab ? instructions ... «else: Tab ? instructions»,,valueIfTrue if condition else valueIfFalse (Python 2.5+)
S-Lang,if (condition) { instructions } «else { instructions }»,if (condition) { instructions } else if (condition) { instructions } ... «else { instructions }»,switch (variable) { case case1: instructions } { case case2: instructions } ...,
Fortran,IF (condition) THEN instructions ELSE instructions ENDIF,IF (condition) THEN instructions ELSEIF (condition) THEN instructions ... ELSE instructions ENDIF,SELECT CASE(variable) CASE (case1) instructions ... CASE DEFAULT instructions END SELECT,
Forth,condition IF instructions « ELSE instructions» THEN,condition IF instructions ELSE condition IF instructions THEN THEN,value CASE case OF instructions ENDOF case OF instructions ENDOF default instructions ENDCASE,condition IF valueIfTrue ELSE valueIfFalse THEN
OCaml,if condition then begin instructions end «else begin instructions end»,if condition then begin instructions end else if condition then begin instructions end ... «else begin instructions end»,match value with pattern1 -> expression | pattern2 -> expression ... «| _ -> expression»[b],if condition then valueIfTrue else valueIfFalse
F#,Lightweight syntax mode: Either on a single line or with indentation as shown below: if condition then Tab ? instructions «else Tab ? instructions» Verbose syntax mode: Same as Standard ML (below).,Lightweight syntax mode: Either on a single line or with indentation as shown below: if condition then Tab ? instructions elif condition then Tab ? instructions ... «else Tab ? instructions» Verbose syntax mode: Same as Standard ML (below).,,
Standard ML,if condition then «(»instructions «)» else «(» instructions «)»,if condition then «(»instructions «)» else if condition then «(» instructions «)» ... else «(» instructions «)»,case value of pattern1 => expression | pattern2 => expression ... «| _ => expression»[b],
Haskell (GHC),if condition then expression else expression or when condition (do instructions) or unless notcondition (do instructions),result | condition = expression | condition = expression | otherwise = expression,case value of { pattern1 -> expression; pattern2 ->expression; ... «_ -> expression»}[b],
Bash shell,if condition-command; then expression «else expression» fi,if condition-command; then expression elif condition-command; then expression «else expression» fi,case "$variable" in "$condition1" ) command... "$condition2" ) command... esac,
CoffeeScript,if condition then expression «else expression»,if condition then expression else if condition then expression «else expression»,switch expression when condition then expression else expression,All conditions are expressions
,if condition expression «else expression»,if condition expression else if condition expression «else expression»,,
,expression if condition,unless condition expression else unless condition expression «else expression»,switch expression when condition expression «else expression»,
,unless condition expression «else expression»,,,
,expression unless condition,,,
COBOL,IF condition «THEN» expression «ELSE expression». [d],,EVALUATE expression «ALSO expression...» WHEN case-or-condition «ALSO case-or-condition...» expression ... «WHEN OTHER expression» END-EVALUATE,
,if,else if,select case,conditional expression
=======
,while,do while,for i = first to last,foreach
Ada[1],while condition loop statements end loop,loop statements exit when not condition end loop,for index in «reverse» [first .. last | discrete_type] loop statements end loop,for item of «reverse» iterator loop statements end loop (for [all | some] [in | of] [first .. last | discrete_type | iterator] => predicate)[b]
ALGOL 68,«for index» «from first» «by increment» «to last» «while condition» do statements od,,,for key «to upb list» do «typename val=list[key];» statements od
,«while condition» do statements od,«while statements; condition» do statements od,«for index» «from first» «by increment» «to last» do statements od,
APL,:While condition statements :EndWhile,:Repeat statements:Until condition,:For var«s» :In list statements :EndFor,:For var«s» :InEach list statements :EndFor
C (C99),instructions can be a single statement or a block in the form of: { statements } while (condition) instructions,do instructions while (condition);,for («type» i = first; i <= last; i++) instructions,N/A
Objective-C,,,,for (type item in set) instructions
C++ (STL),,,,"«std::»for_each(start, end, function) (C++11) for (type item : set) instructions"
C#,,,,foreach (type item in set) instructions
Java,,,,for (type item : set) instructions
JavaScript,,,for (var i = first; i <= last; i++) instructions,for (var item of set) instructions (since EcmaScript 2015[11])
PHP,,,"foreach (range(first, last) as $i) instructions or for ($i = first; $i <= last; $i++) instructions",foreach (set as item) instructions or foreach (set as key => item) instructions
Windows PowerShell,,,for ($i = first; $i -le last; $i++) instructions,foreach (item in set) instructions using item
D,,,foreach (i; first ... last) instructions,foreach («type» item; set) instructions
Go,for condition { instructions },,for i := first; i <= last; i++ { instructions },"for key, item := range set { instructions }"
Swift,while condition { instructions },repeat { instructions } while condition (2.x) do { instructions } while condition (1.x),for i = first ... last { instructions } or for i = first ..< last+1 { instructions } or for var i = first; i <= last; i++ { instructions },for item in set { instructions }
Perl,while (condition) { instructions } or until (notcondition) { instructions },do { instructions } while (condition) or do { instructions } until (notcondition),for«each» «$i» (first .. last) { instructions } or for ($i = first; $i <= last; $i++) { instructions },for«each» «$item» (set) { instructions }
Raku,while condition { instructions } or until notcondition { instructions },repeat { instructions } while condition or repeat { instructions } until notcondition,for first..last -> $i { instructions } or loop ($i = first; $i <=last; $i++) { instructions },for set« -> $item» { instructions }
Ruby,while condition instructionsend or until notcondition instructions end,begin instructions end while condition or begin instructions end until notcondition,for i in first..last instructions end or for i in first...last+1 instructions end or first.upto(last) { |i| instructions },for item in set instructions end or set.each { |item| instructions }
Bash shell,while condition ;do instructionsdone or until notcondition ;do instructions done,N/A,for ((i = first; i <= last; ++i)) ; do instructionsdone,for item in set ;do instructions done
Scala,while (condition) { instructions },do { instructions } while (condition),for (i <- first to last «by 1») { instructions } or first to last «by 1» foreach (i => { instructions }),for (item <- set) { instructions } or set foreach (item => { instructions })
Smalltalk,conditionBlock whileTrue: loopBlock,loopBlock doWhile: conditionBlock,first to: last do: loopBlock,collection do: loopBlock
Common Lisp,(loop while condition do instructions) or (do () (notcondition) instructions),(loop do instructions while condition),(loop for i from first to last «by 1» do instructions) or (dotimes (i N) instructions) or (do ((i first (1+ i))) ((>= i last)) instructions),(loop for item in list do instructions) or (loop for item across vector do instructions) or (dolist (item list) instructions) or (mapc function list) or (map 'type function sequence)
Scheme,(do () (notcondition) instructions) or (let loop () (if condition (begin instructions (loop)))),(let loop () (instructions (if condition (loop)))),(do ((i first (+ i 1))) ((>= i last)) instructions) or (let loop ((i first)) (if (< i last) (begin instructions (loop (+ i 1))))),(for-each (lambda (item) instructions) list)
ISLISP,(while condition instructions),(tagbody loop instructions (if condition (go loop)),(for ((i first (+ i 1))) ((>= i last)) instructions),(mapc (lambda (item) instructions) list)
Pascal,while condition do begin instructions end,repeat instructions until notcondition;,for i := first «step 1» to last do begin instructions end;[a],for item in set do ...
Visual Basic,Do While condition instructionsLoop or Do Until notcondition instructionsLoopor While condition instructions Wend (Visual Basic) End While (Visual Basic .NET),Do instructions Loop While condition or Do instructions Loop Until notcondition,i must be declared beforehand. For i = first To last« Step 1» instructions Next i,For Each item In set instructions Next item
Visual Basic .NET,,,For i« As type» = first To last« Step 1» instructionsNext« i»[a],For Each item« As type» In set instructions Next« item»
Xojo,While condition instructionsWend,Do Until notcondition instructionsLoop or Do instructions Loop Until notcondition,,
Python,while condition : Tab ? instructions «else: Tab ? instructions»,N/A,"for i in range(first, last+1): Tab ? instructions «else: Tab ? instructions»(Python 3.x) for i in xrange(first, last+1): Tab ? instructions «else: Tab ?instructions»(Python 2.x)",for item in set: Tab ? instructions «else: Tab ? instructions»
S-Lang,while (condition) { instructions } «then optional-block»,do { instructions } while (condition) «then optional-block»,for (i = first; i <= last; i++) { instructions } «then optional-block»,foreach item(set) «using (what)» { instructions } «then optional-block»
Fortran,DO WHILE (condition) instructions ENDDO,DO instructions IF (condition) EXIT ENDDO,"DO I = first,last instructions ENDDO",N/A
Forth,BEGIN « instructions » condition WHILE instructions REPEAT,BEGIN instructions condition UNTIL,limit start DO instructions LOOP,N/A
OCaml,while condition do instructions done,N/A,for i = first to last do instructions done,Array.iter (fun item -> instructions) array List.iter (fun item -> instructions) list
F#,while condition do Tab ? instructions,N/A,for i = first to last do Tab ? instructions,for item in set do Tab ? instructions or Seq.iter (fun item -> instructions) set
Standard ML,while condition do ( instructions ),N/A,,Array.app (fn item => instructions) array app (fn item => instructions) list
Haskell (GHC),N/A,,Control.Monad.forM_ [first..last] (\i -> do instructions),Control.Monad.forM_ list (\item -> do instructions)
Eiffel,from setup until condition loop instructions end,,,
CoffeeScript,while condition expression,N/A,for i in [first..last] expression,for item in set expression
,expression while condition,,,
,while condition then expression,,,
,until condition expression,,,
,expression until condition,,for i in [first..last] then expression,for item in set then expression
,until condition then expression,,expression for i in [first..last],expression for item in set
COBOL,PERFORM procedure-1 «THROUGH procedure-2» ««WITH» TEST BEFORE» UNTIL condition[c],PERFORM procedure-1 «THROUGH procedure-2» «WITH» TEST AFTER UNTIL condition[c],PERFORM procedure-1 «THROUGH procedure-2» VARYING i FROM first BY increment UNTIL i > last[d],N/A
,PERFORM ««WITH» TEST BEFORE» UNTIL condition expression END-PERFORM,PERFORM «WITH» TEST AFTER UNTIL condition expression END-PERFORM,PERFORM VARYING i FROM first BY increment UNTIL i > last expression END-PERFORM[d],
>>>>>>> ff4582384893868142f1b485861afa33c91d9c67
