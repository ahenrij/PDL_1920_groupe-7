Format,Languages
<<<<<<< HEAD
"string1 OP string2, where OP can be any of =, <>, <, >, <= and >=","Pascal, Object Pascal (Delphi), OCaml, Seed7, Standard ML, BASIC, VB, VB .NET, F#"
"string1 OP string2, where OP can be any of =, /=, ?, <, >, <=, ? and ?; Also: EQ, NE, LT, LE, GE and GT",ALGOL 68
"(stringOP? string1 string2), where OP can be any of =, -ci=, <, -ci<, >, -ci>, <=, -ci<=, >= and -ci>= (operators starting with '-ci' are case-insensitive)",Scheme
"(stringOP string1 string2), where OP can be any of =, -ci=, <>, -ci<>, <, -ci<, >, -ci>, <=, -ci<=, >= and -ci>= (operators starting with '-ci' are case-insensitive)",Scheme (SRFI 13)
"(stringOP string1 string2), where OP can be any of =, -equal, /=, -not-equal, <, -lessp, >, -greaterp, <=, -not-greaterp, >= and -not-lessp (the verbal operators are case-insensitive)",Common Lisp
"(stringOP string1 string2), where OP can be any of =, /=, <, >, <=, and >=",ISLISP
"string1 OP string2, where OP can be any of =, \=, <, >, <= and >=",Rexx
"string1 OP string2, where OP can be any of =, ¬=, <, >, <=, >=, ¬< and ¬>",PL/I
"string1 OP string2, where OP can be any of =, /=, <, >, <= and >=",Ada
"string1 OP string2, where OP can be any of ==, /=, <, >, =< and >=",Erlang
"string1 OP string2, where OP can be any of ==, /=, <, >, <= and >=",Haskell
"string1 OP string2, where OP can be any of eq, ne, lt, gt, le and ge","Perl, Raku"
"string1 OP string2, where OP can be any of ==, !=, <, >, <= and >=","C++ (STL), C#, D, Go, JavaScript, Python, PHP, Ruby, Rust,[9] Swift, Ya"
"string1 OP string2, where OP can be any of -eq, -ceq, -ne, -cne, -lt, -clt, -gt, -cgt, -le, -cle, -ge, and -cge (operators starting with 'c' are case-sensitive)",Windows PowerShell
"string1 OP string2, where OP can be any of ==, ~=, <, >, <= and >=",Lua
"string1 OP string2, where OP can be any of =, ~=, <, >, <= and >=",Smalltalk
"string1 OP string2, where OP can be any of ==, /=, <, >, <= and >=; Also: .EQ., .NE., .LT., .LE., .GT. and .GE.",Fortran.[10]
"string1 OP string2 where OP can be any of =, <>, <, >, <=, >= as well as worded equivalents",COBOL
"string1 OP string2 where OP can be any of ==, <>, <, >, <= and >=",Cobra
"string1 OP string2 is available in the syntax, but means comparison of the pointers pointing to the strings, not of the string contents. Use the Compare (integer result) function.","C, Java"
"string1.METHOD(string2) where METHOD is any of eq, ne, gt, lt, ge, le",Rust[9]
=======
string[startpos:endpos],ALGOL 68 (changes base index)
string (startpos .. endpos),Ada (changes base index)
"Mid(string, startpos, numChars)",VB
"mid(string, startpos, numChars)",FreeBASIC
string[startpos+(?numChars)-~?IO],APL
"MID$(string, startpos, numChars)",BASIC
"substr(string, startpos, numChars)","AWK (changes string), Perl 5,[43][44] PHP[43][44]"
"substr(string, startpos, numChars) string.substr(startpos, numChars)",Raku[45][46]
"substr(string, startpos «,numChars, padChar»)",Rexx
string[startpos:endpos],"Cobra, Python,[43][47] Go"
"string[startpos, numChars]",Pick Basic
"string[startpos, numChars] string[startpos .. endpos-1] string[startpos ... endpos]",Ruby[43][47]
string[startpos .. endpos] string[startpos len numChars],Seed7
"string.slice(startpos«, endpos»)",JavaScript[43][47]
"string.substr(startpos«, numChars»)","C++ (STL), JavaScript"
"string.Substring(startpos, numChars)","VB .NET, C#, Windows PowerShell, F#"
"string.substring(startpos«, endpos»)","Java, JavaScript"
"copy(string, startpos, numChars)",Object Pascal (Delphi)
(substring string startpos endpos),Scheme
(subseq string startpos endpos),Common Lisp
(subseq string startpos endpos),ISLISP
String.sub string startpos numChars,OCaml
"substring (string, startpos, numChars)",Standard ML
"string:sub_string(string, startpos, endpos) string:substr(string, startpos, numChars)",Erlang
"strncpy(result, string + startpos, numChars);",C
string[startpos .. endpos+1],D
take numChars $ drop startpos string,Haskell
"[string substringWithRange:NSMakeRange(startpos, numChars)]",Objective-C (NSString * only)
string.[startpos..endpos],F#
"string.sub(string, startpos, endpos) (string):sub(startpos, endpos)",Lua[43][47]
string copyFrom: startpos to: endpos,Smalltalk
string(startpos:endpos),Fortran
SUBSTRING(string FROM startpos «FOR numChars»),SQL
"StringTake[string, {startpos, endpos}]",Mathematica[43][47]
string[startpos .. endpos],Ya
string (startpos:numChars),COBOL
string range string startpos endpos,Tcl
string[startpos..endpos] string.get(startpos..endpos),Rust[26]
>>>>>>> ff4582384893868142f1b485861afa33c91d9c67
