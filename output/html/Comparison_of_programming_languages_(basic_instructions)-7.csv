<<<<<<< HEAD
,fixed size array,,dynamic size array,
,one-dimensional array,multi-dimensional array,one-dimensional array,multi-dimensional array
Ada[1],array (<first> .. <last>) of <type> or array (<discrete_type>) of <type>,"array (<first1> .. <last1>, <first2> .. <last2>, ...) of <type> or array (<discrete_type1>, <discrete_type2>, ...) of <type>",array (<discrete_type> range <>) of <type>,"array (<discrete_type1> range <>, <discrete_type2> range <>, ...) of <type>"
ALGOL 68,[first:last]«modename» or simply: [size]«modename»,"[first1:last1, first2:last2]«modename» or [first1:last1][first2:last2]«modename» etc.",flex[first:last]«modename» or simply: flex[size]«modename»,"flex[first1:last1, first2:last2]«modename» or flex[first1:last1]flex[first2:last2]«modename» etc."
C (C99),type name[size][a],type name[size1][size2][a],type *name or within a block: int n = ...; type name[n],
C++ (STL),"«std::»array<type, size>(C++11)",,«std::»vector<type>,
C#,type[],"type[,,...]",System.Collections.ArrayList or System.Collections.Generic.List<type>,
Java,type[][b],type[][]...[b],ArrayList or ArrayList<type>,
D,type[size],type[size1][size2],type[],
Go,[size]type,[size1][size2]...type,[]type,[][]type
Rust,[type; size],[[type; size1]; size2],Vec<type>,Vec<Vec<type>>
Swift,,,[type] or Array<type>,[[type]] or Array<Array<type>>
Objective-C,NSArray,,NSMutableArray,
JavaScript,N/A,N/A,Array[d],
Common Lisp,(simple-array type (dimension)),(simple-array type (dimension1 dimension2)),(array type (dimension)),(array type (dimension1 dimension2))
Scheme,,,,
ISLISP,,,,
Pascal,array[first..last] of type[c],"array[first1..last1] of array[first2..last2] ... of type [c] or array[first1..last1, first2..last2, ...] of type [c]",N/A,N/A
Object Pascal (Delphi),,,array of type,array of array ... of type
Visual Basic,,,,
Visual Basic .NET,type(),"type(,,...)",System.Collections.ArrayList or System.Collections.Generic.List(Of type),
Python,,,list,
S-Lang,,,,
Fortran,type :: name(size),"type :: name(size1, size2,...)","type, ALLOCATABLE :: name(:)","type, ALLOCATABLE :: name(:,:,...)"
PHP,,,array,
Perl,,,,
Raku,,,Array[type] or Array of type,
Ruby,,,Array,
Scala,Array[type],Array[...[Array[type]]...],ArrayBuffer[type],
Seed7,array type or array [idxType] type,array array type or array [idxType] array [idxType] type,array type or array [idxType] type,array array type or array [idxType] array [idxType] type
Smalltalk,Array,,OrderedCollection,
Windows PowerShell,type[],"type[,,...]",,
OCaml,type array,type array ... array,,
F#,type [] or type array,"type [,,...]",System.Collections.ArrayList or System.Collections.Generic.List<type>,
Standard ML,type vector or type array,,,
Haskell (GHC),,,,
COBOL,level-number type OCCURS size «TIMES».,one-dimensional array definition...,level-number type OCCURS min-size TO max-size «TIMES» DEPENDING «ON» size.[e],N/A
=======
,Simple composite types,,Algebraic data types,Unions
,Records,Tuple expression,,
Ada[1],type identifier is «abstract» «tagged» «limited» [record fieldname1 : type; fieldname2 : type; ... end record |null record],N/A,"Any combination of records, unions and enumerations (as well as references to those, enabling recursive types).",type identifier (variation : discrete_type) is record case variation is when choice_list1 => fieldname1 : type; ... when choice_list2 => fieldname2 : type; ... ...end case;end record
ALGOL 68,"struct (modename «fieldname», ...);",Required types and operators can be user defined,,"union (modename, ...);"
C (C99),struct «name» {type name;...};,N/A,N/A,union {type name;...};
Objective-C,,,,
C++,struct «name» {type name;...};[b],«std::»tuple<type1..typen>,,
C#,struct name {type name;...},"(val1, val2, ... )",,N/A
Java,N/A[a],,,
JavaScript,,N/A,,
D,struct name {type name;...},,"std.variant.Algebraic!(type,...)",union {type name;...}
Go,struct { «name» type ...},,,
Rust,"struct name {name: type, ...}","(val1, val2, ... )","enum name { Foo(types), ...}","union name {name: type, ...}"
Swift,struct name { var name «: type» ...},"(«name1:» val1, «name2:» val2, «name3:» val3, ... )",enum name { case Foo«(types)» case Bar «(types)» ... },
Common Lisp,(defstruct name slot-name (slot-name initial-value) (slot-name initial-value :type type) ...),(cons val1 val2)[c],,
Scheme,N/A,,,
ISLISP,,,,
Pascal,record name: type; ...end,N/A,N/A,record case type of value: (types); ...end
Visual Basic,,,,
Visual Basic .NET,Structure name Dim name As type ... End Structure,"(val1, val2, ... )",,
Python,N/A[a],"«(»val1, val2, val3, ... «)»",,N/A
S-Lang,"struct {name [=value], ...}",,,
Fortran,TYPE name type :: name ... END TYPE,,,
PHP,N/A[a],,,
Perl,N/A[d],,,N/A
Raku,N/A[a],,,
Ruby,OpenStruct.new({:name => value}),,,
Scala,"case class name(«var» name: type, ...)","(val1, val2, val3, ... )",abstract class name case class Foo(«parameters») extends name case class Bar(«parameters») extends name ... or abstract class name case object Foo extends name case object Bar extends name ... or combination of case classes and case objects,
Windows PowerShell,,,,
OCaml,type name = {«mutable» name : type;...},"«(»val1, val2, val3, ... «)»",type name = Foo «of type» | Bar «of type» | ...,N/A
F#,,,,
Standard ML,"type name = {name : type,...}","(val1, val2, val3, ... )",datatype name = Foo «of type» | Bar «of type» | ...,
Haskell,"data Name = Constr {name :: type,...}",,data Name = Foo «types» | Bar «types» | ...,
COBOL,level-number name type clauses. level-number+n name type clauses. ...,N/A,N/A,name REDEFINES variable type.
>>>>>>> ff4582384893868142f1b485861afa33c91d9c67
