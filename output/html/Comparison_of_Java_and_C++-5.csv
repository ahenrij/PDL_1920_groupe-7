C++,Java
<<<<<<< HEAD
"class Foo {          // Declares class Foo
    int x = 0;       //  Private Member variable. It will
                     // be initialized to 0, if the
                     // constructor would not set it.
                     // (from C++11)
    public:
      Foo() : x(0)     //  Constructor for Foo; initializes
      {}               //  x to 0. If the initializer were
                     //  omitted, the variable would
                     //  be initialized to the value that
                     // has been given at declaration of x.

      int bar(int i) { // Member function bar()
          return 3*i + x;
      }
};","class Foo {               // Defines class Foo
    private int x;        // Member variable, normally declared
                          // as private to enforce encapsulation
                          // initialized to 0 by default

    public Foo() {        // Constructor for Foo
    }                     // no-arg constructor supplied by default

    public int bar(int i) {        // Member method bar()
        return 3*i + x;
    }
}"
"Foo a;
// declares a to be a Foo object value,
// initialized using the default constructor.

// Another constructor can be used as
Foo a(args);
// or (C++11):
Foo a{args};",Foo a = new Foo();
// declares a to be a reference to a new Foo object
// initialized using the default constructor

// Another constructor can be used as
Foo a = new Foo(args);
Foo b = a;
// copies the contents of a to a new Foo object b;
// alternative syntax is "Foo b(a)",// Foo b = a;
// would declare b to be reference to the object pointed to by a
Foo b = a.clone();
// copies the contents of the object pointed to by a 
//     to a new Foo object;
// sets the reference b to point to this new object;
// the Foo class must implement the Cloneable interface
//     for this code to compile
a.x = 5; // modifies the object a,a.x = 5; // modifies the object referenced by a
"std::cout << b.x << std::endl;
// outputs 0, because b is
// some object other than a","System.out.println(b.x);
// outputs 0, because b points to
// some object other than a"
Foo *c;
// declares c to be a pointer to a
// Foo object (initially
// undefined; could point anywhere),Foo c;
// declares c to be a reference to a Foo
// object (initially null if c is a class member;
// it is necessary to initialize c before use
// if it is a local variable)
c = new Foo;
// c is set to the value of the address of the Foo object created by operator new,c = new Foo();
// binds c to reference a new Foo object
Foo &d = *c;
// binds d to reference the same object to which c points,Foo d = c;
// binds d to reference the same object as c
c->x = 5;
// modifies the object pointed to by c,c.x = 5;
// modifies the object referenced by c
d.bar(5);  // invokes Foo::bar() for a
c->bar(5); // invokes Foo::bar() for *c,d.bar(5); // invokes Foo.bar() for a
c.bar(5); // invokes Foo.bar() for c
"std::cout << d.x << std::endl;
// outputs 5, because d references the
// same object to which c points","System.out.println(d.x);
// outputs 5, because d references the
// same object as c"
=======
Extends C with object-oriented programming and generic programming. C code can most properly be used.,Strongly influenced by C++/C syntax.
"Compatible with C source code, except for a few corner cases.",Provides the Java Native Interface and recently Java Native Access as a way to directly call C/C++ code.
"Write once, compile anywhere (WOCA).","Write once, run anywhere/everywhere (WORA/WORE)."
"Allows procedural programming, functional programming, object-oriented programming, generic programming, and template metaprogramming. Favors a mix of paradigms.","Allows procedural programming, functional programming (since Java 8) and generic programming (since Java 5), but strongly encourages the object-oriented programming paradigm. Includes support for creating scripting languages."
Runs as native executable machine code for the target instruction set(s).,Runs on a virtual machine.
Provides object types and type names. Allows reflection via run-time type information (RTTI).,"Is reflective, allowing metaprogramming and dynamic code generation at runtime."
Has multiple binary compatibility standards (commonly Microsoft (for MSVC compiler) and Itanium/GNU (for almost all other compilers)).,"Has one binary compatibility standard, cross-platform for OS and compiler."
"Optional automated bounds checking (e.g., the at() method in vector and string containers).",All operations are required to be bound-checked by all compliant distributions of Java. HotSpot can remove bounds checking.
Native unsigned arithmetic support.,"Native unsigned arithmetic unsupported. Java 8 changes some of this, but aspects are unclear.[1]"
"Standardized minimum limits for all numerical types, but the actual sizes are implementation-defined. Standardized types are available via the standard library <cstdint>.",Standardized limits and sizes of all primitive types on all platforms.
"Pointers, references, and pass-by-value are supported for all types (primitive or user-defined).",All types (primitive types and reference types) are always passed by value.[2]
"Memory management can be done manually via new / delete, automatically by scope, or by smart pointers. Supports deterministic destruction of objects. Garbage collection ABI standardized in C++11, though compilers are not required to implement garbage collection.",Automatic garbage collection. Supports a non-deterministic finalize() method use of which is not recommended.[3]
Resource management can be done manually or by automatic lifetime-based resource management (RAII).,"Resource management must generally be done manually, or automatically via finalizers, though this is generally discouraged. Has try-with-resources for automatic scope-based resource management (version 7 onwards). It can also be done using the internal API sun.misc.Unsafe but that usage is highly discouraged and will be replaced by a public API in an upcoming Java version."
"Supports classes, structs (passive data structure (PDS) types), and unions, and can allocate them on the heap or the stack.",Classes are allocated on the heap. Java SE 6 optimizes with escape analysis to allocate some objects on the stack.
"Allows explicitly overriding types, and some implicit narrowing conversions (for compatibility with C).",Rigid type safety except for widening conversions.
"The C++ Standard Library was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, iterators, numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The Boost library offers more functions including network I/O. A rich amount of third-party libraries exist for GUI and other functions like: Adaptive Communication Environment (ACE), Crypto++, various XMPP Instant Messaging (IM) libraries,[4] OpenLDAP, Qt, gtkmm.","The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for XML, XSLT, MIDI, database connectivity, naming services (e.g. LDAP), cryptography, security services (e.g. Kerberos), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by JavaFX in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of "native platform look" support."
Operator overloading for most operators. Preserving meaning (semantics) is highly recommended.,Operators are not overridable. The language overrides + and += for the String class.
"Single and multiple inheritance of classes, including virtual inheritance.",Only supports single inheritance of classes.
Compile-time templates. Allows for Turing complete meta-programming.,"Generics are used to achieve basic type-parametrization, but they do not translate from source code to byte code due to the use of type erasure by the compiler."
"Function pointers, function objects, lambdas (in C++11), and interfaces.","Functions references, function objects and lambdas were added in Java 8. Classes (and interfaces, which are classes) can be passed as references as well through SomeClass.class"
No standard inline documentation mechanism. Third-party software (e.g. Doxygen) exists.,Extensive Javadoc documentation standard on all system classes and methods.
"const keyword for defining immutable variables and member functions that do not change the object. Const-ness is propagated as a means to enforce, at compile-time, correctness of the code with respect to mutability of objects (see const-correctness).","final provides a version of const, equivalent to type* const pointers for objects and const for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation."
Supports the goto statement.,Supports labels with loops and statement blocks. goto is a reserved keyword but is marked as "unused" in the Java specification.
"Source code can be written to be cross-platform (can be compiled for Windows, BSD, Linux, macOS, Solaris, etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform.","Compiled into Java bytecode for the JVM. Byte code is dependent on the Java platform, but is typically independent of operating system specific features."
>>>>>>> ff4582384893868142f1b485861afa33c91d9c67
