<<<<<<< HEAD
,object member,,,class member,namespace member
,method,field,property,,
ABAP Objects,x->method(«parameters»).[39],x->field,,x=>field or x=>method(«parameters[39]»).,
C++ (STL),x.method(parameters) or ptr->method(parameters),x.field or ptr->field,,cls::member,ns::member
Objective-C,[x method«:parameter «bar:parameter ...»»],x->field,x.property (2.0 only) or [x property],[cls method«:parameter «bar:parameter ...»»],
Smalltalk,x method«:parameter «bar:parameter ...»»,,,cls method«:parameter «bar:parameter ...»»,
Swift,x.method(parameters),,x.property,cls.member,
APL (Dyalog),left argument» x.method «right argument(s)»,x.field,x.property,cls.member,ns.member
C#,x.method(parameters),,,,
Java,,,,,
D,,,x.property,,
Python,,,,,
Visual Basic .NET,,,,,
Xojo,,,,,
Windows PowerShell,,,,[cls]::member,
F#,,,,cls.member,
eC,x.method«(parameters)»,x.field,x.property,cls::member,ns::member
Eiffel,x.method«(parameters)»,x.field,,{cls}.member,rowspan=2 
Ruby,,,x.property,cls.member,
PHP,x->method(parameters),x->field,x->property,cls::member,ns\member
Perl,x->method«(parameters)»,x->{field},,cls->method«(parameters)»,ns::member
Raku,x.method«(parameters)» or x!method«(parameters)»,x.field or x!field,,cls.method«(parameters)» or cls!method«(parameters)»,ns::member
OCaml,x#method «parameters»,colspan=2 ,,,
JavaScript,x.method(parameters) x["method"](parameters),x.field x["field"],x.property x["property"],cls.member cls["member"],
COBOL,INVOKE x "method" «USING parameters» «RETURNING result» or x::"method"«(«parameters»)»,,property OF x,INVOKE cls "method" «USING parameters» «RETURNING result» or cls::"method"«(«parameters»)» or property OF cls,
Cobra,x.method«(parameters)»,x.field,x.property,cls.member,ns.member
=======
,unary,binary,function call
ABAP Objects,colspan=3 ,,
C++ (STL),type operator symbol () { instructions },type operator symbol (type operand2) { instructions },type operator () («parameters») { instructions }
C#,static type operator symbol(type operand) { instructions },"static type operator symbol(type operand1, type operand2) { instructions }",
D,type opUnary(string s)() if (s == "symbol") { instructions },type opBinary(string s)(type operand2) if (s == "symbol") { instructions } type opBinaryRight(string s)(type operand1) if (s == "symbol") switch (s) { instructions },type opCall(«parameters») { instructions }
Java,rowspan=2 colspan=3 ,,
Objective-C,,,
Swift,func symbol(operand1 : type) -> returntype { instructions } (outside class),"func symbol(operand1 : type1, operand2 : type2) -> returntype { instructions } (outside class)",
Eiffel[35],op_name alias "symbol": TYPE do instructions end,op_name alias "symbol" (operand: TYPE1): TYPE2 do instructions end,
Python,def __opname__(self): Tab instructions Tab return value,"def __opname__(self, operand2): Tab instructions Tab return value","def __call__(self«, paramters»): Tab instructions Tab return value"
Visual Basic .NET,Shared Operator symbol(operand As type) As type instructions End Operator,"Shared Operator symbol(operand1 As type, operand2 As type) As type instructions End Operator",
Xojo,Function Operator_name(operand As type) As type instructions End Function,colspan=2 ,
PHP,[36],,function __invoke(«parameters») { instructions } (PHP 5.3+)
Perl,use overload "symbol" => sub { my ($self) = @_; instructions };,"use overload "symbol" => sub { my ($self, $operand2, $operands_reversed) = @_; instructions };",
Raku,«our «type »»«multi »method prefix:<symbol> («$operand: ») { instructions ... return value; } or «our «type »»«multi »method postfix:<symbol> («$operand: ») { instructions ... return value; } or «our «type »»«multi »method circumfix:<symbol1 symbol2> («$operand: ») { instructions ... return value; },«our «type »»«multi »method infix:<symbol> («$operand1: » type operand2) { instructions ... return value; },«our «type »»«multi »method postcircumfix:<( )> («$self: » «parameters») { instructions }
Ruby,def symbol instructions expression resulting in return value end,def symbol(operand2) instructions expression resulting in return value end,
Windows PowerShell,rowspan=2 colspan=3 ,,
OCaml,,,
F#,static member (symbol) operand = expression,"static member (symbol) (operand1, operand2) = expression",
COBOL,colspan=3 ,,
ISLISP,colspan=3 ,,
>>>>>>> ff4582384893868142f1b485861afa33c91d9c67
