<<<<<<< HEAD
,Simple composite types,,Algebraic data types,Unions
,Records,Tuple expression,,
Ada[1],type identifier is «abstract» «tagged» «limited» [record<dl><dd>fieldname1 : type;</dd><dd>fieldname2 : type;</dd></dl>... end record |null record],,"Any combination of records, unions and enumerations (as well as references to those, enabling recursive types).",type identifier (variation : discrete_type) is record<dl><dd>case variation is<dl><dd>when choice_list1 =><dl><dd>fieldname1 : type;</dd><dd>...</dd></dl></dd></dl><dl><dd>when choice_list2 =><dl><dd>fieldname2 : type;</dd><dd>...</dd></dl></dd></dl><dl><dd>...</dd></dl>end case;</dd></dl>end record
ALGOL 68,"struct (modename «fieldname», ...);",Required types and operators can be user defined,,"union (modename, ...);"
C (C99),struct «name» {type name;...};,rowspan=2 ,rowspan=3 ,union {type name;...};
Objective-C,,,,
C++,struct «name» {type name;...;C++'s struct[b],«std::»tuple<type1..typen>,,
C#,struct name {type name;...},"(val1, val2, ... )",,rowspan=3 
Java,just classes[a],,,
JavaScript,,,,
D,struct name {type name;...},,"std.variant.Algebraic!(type,...)",union {type name;...}
Go,struct {<dl><dd>«name» type ...</dd></dl>},,,
Rust,"struct name {name: type, ...}","(val1, val2, ... )","enum name { Foo(types), ...}","union name {name: type, ...}"
Swift,struct name {<dl><dd>var name «: type» ...</dd></dl>},"(«name1:» val1, «name2:» val2, «name3:» val3, ... )",enum name { case Foo«(types)» case Bar «(types)» ... },
Common Lisp,(defstruct name slot-name (slot-name initial-value) (slot-name initial-value :type type) ...),(cons val1 val2)pair only[c],,
Scheme,,,,
ISLISP,,,,
Pascal,record<dl><dd>name: type; ...</dd></dl>end,,,record<dl><dd>case type of value: (types); ...</dd></dl>end
Visual Basic,,,,
Visual Basic .NET,Structure name <dl><dd> Dim name As type ... </dd></dl> End Structure,"(val1, val2, ... )",,
Python,just classes[a],"«(»val1, val2, val3, ... «)»",,
S-Lang,"struct {name [=value], ...}",,,
Fortran,TYPE name <dl><dd> type :: name ... </dd></dl> END TYPE,,,
PHP,just classes[a],,,
Perl,Perl's records[d],,,rowspan=3 
Raku,just classes[a],,,
Ruby,lang=ruby1=OpenStruct.new({:name => value),,,
Scala,"case class name(«var» name: type, ...)","(val1, val2, val3, ... )",abstract class name case class Foo(«parameters») extends name case class Bar(«parameters») extends name ... or abstract class name case object Foo extends name case object Bar extends name ... or combination of case classes and case objects,
Windows PowerShell,,,,
OCaml,type name = {«mutable» name : type;...},"«(»val1, val2, val3, ... «)»",type name = Foo «of type» | Bar «of type» | ...,rowspan=4 
F#,,,,
Standard ML,"type name = {name : type,...}","(val1, val2, val3, ... )",Bar «of type» | ...,
Haskell,"data Name = Constr {name :: type,...}",,Bar «types» | ...,
COBOL,level-number name type clauses. level-number+n name type clauses. ...,,,name REDEFINES variable type.
=======
,Text,,Boolean,Enumeration,Object/Universal
,Character,Stringstring[a],,,
Ada[1],Character,String & Bounded_String & Unbounded_String,Boolean,"(item1, item2, ... )",tagged null record
ALGOL 68,char,string & bytes,bool & bits,,
C (C99),char wchar_t,,boolint bool[b],"enum «name» {item1, item2, ... };",void *
C++ (STL),,«std::»string,,,
Objective-C,unichar,NSString *,BOOL,,id
C#,char,string,bool,"enum name { item1« = value», item2« = value», ... }",object
Java,,String,boolean,"enum name {item1, item2, ... }",Object
Go,byte rune,string,bool,const (<dl><dd>item1 = iota item2 ... </dd></dl>),interface{}
Rust,char,String,bool,"enum name {<dl><dd>item1, item2, ...</dd></dl>}",
Swift,Character,String,Bool,"enum name { case item1, item2, ... }",Any
D,char,string,bool,"enum name {item1, item2, ... }",std.variant.Variant
Common Lisp,character,string,boolean,(member item1 item2 ...),t
Scheme,,,,,
ISLISP,,,,,
Pascal (ISO),char,,boolean,"(item1, item2, ...)",
Object Pascal (Delphi),,string,,,variant
Visual Basic,,String,Boolean,Enum name<dl><dd>item1«= value»</dd><dd>item2« = value»</dd><dd>...</dd><dd>End Enum</dd></dl>,Variant
Visual Basic .NET,Char,,,,Object
Xojo,,,,,Object or Variant
Python,string as char[d],str,bool,from enum import Enum class Name(Enum):<dl><dd>item1 = value</dd><dd>item2 = value</dd><dd>...</dd></dl># Python 3.4+,object
JavaScript,string as char[d],String,Boolean,,Object
S-Lang,,,,,
Fortran,CHARACTER(LEN = *),"CHARACTER(LEN = :), allocatable",LOGICAL(KIND = n)logical kinds[f],,CLASS(*)
PHP,string as char[d],string,bool,,(type declaration omitted)
Perl,string as char[d],,,,UNIVERSAL
Raku,Char,Str,Bool,enum name<item1 item2 ...> enum name <<:item1(value) :item2(value) ..>>,Mu
Ruby,string as char[d],String,ObjectRuby's bool[c],,Object
Scala,Char,String,Boolean,"object name extends Enumeration {<dl><dd>val item1, item2, ... = Value</dd></dl>}",Any
Seed7,char,string,boolean,"const type: name is new enum<dl><dd> item1, item2, ... </dd></dl>end enum;",
Windows PowerShell,,,,,
OCaml,char,string,bool,enum[e],
F#,,,,item2 = value | ...,obj
Standard ML,,,,enum[e],
Haskell (GHC),Char,String,Bool,enum[e],
Eiffel,CHARACTER,STRING,BOOLEAN,,ANY
COBOL,PIC X,PIC X(string length) or PIC X«X...»,PIC 1«(number of digits)» or PIC 1«1...»,,OBJECT REFERENCE
Mathematica,string as char[d],String,,,
>>>>>>> ff4582384893868142f1b485861afa33c91d9c67
