<<<<<<< HEAD
,current object,current object's parent object,null reference,Current Context of Execution
Smalltalk,self,super,nil,thisContext
ABAP Objects,me,super,initial,
APL (Dyalog),?THIS,?BASE,?NULL,
C++ (STL),*this,[40],"NULL, nullptr",
C#,this,base[41],null,
Java,,super[41],,
D,,,,
JavaScript,,super[41] (ECMAScript 6),"null, undefined[42]",
eC,this,,null,
Objective-C,self,super[41],nil,
Swift,self,super[41],nil[43],
Python,self[44],"super(current_class_name, self)[5] super() (3.x only)",None,
Visual Basic .NET,Me,MyBase,Nothing,
Xojo,Me / Self,Parent,Nil,
Eiffel,Current,Precursor «{superclass}» «(args)»[41][45],Void,
PHP,$this,parent[41],null,
Perl,$self[44],$self->SUPER[41],undef,
Raku,self,SUPER,Nil,
Ruby,self,super«(args)»[46],nil,binding
Windows PowerShell,$this,,$NULL,
OCaml,self[47],super[48],,
F#,this,base[41],null,
COBOL,SELF,SUPER,NULL,
Cobra,this,base,nil,
=======
,read-write,read-only,write-only
ABAP Objects,colspan=3 ,,
APL (Dyalog),:Property Bar ? result ? Get instructions ? ? Set arguments instructions ? :EndProperty Bar,:Property Bar ? result ? Get instructions ? :EndProperty Bar,:Property Bar ? Set arguments instructions ? :EndProperty Bar
C++ (STL),colspan=3 ,,
C#,type Bar { get { instructions ... return value; } set { instructions } },type Bar { get { instructions ... return value; } },type Bar { set { instructions } }
D,@property type bar() { instructions ... return value; } @property type bar(type value) { instructions ... return value; },@property type bar() { instructions ... return value; },@property type bar(type value) { instructions ... return value; }
eC,property type Bar { get { instructions ... return value; } set { instructions } },property type Bar { get { instructions ... return value; } },property type Bar { set { instructions } }
Java,colspan=3 ,,
Objective-C 2.0 (Cocoa),@property (readwrite) type bar; and then inside @implementation - (type)bar { instructions } - (void)setBar:(type)value { instructions },@property (readonly) type bar; and then inside @implementation - (type)bar { instructions },
Swift,var bar : type { get { instructions } set«(newBar)» { instructions } },var bar : type { instructions },
Eiffel,feature -- Access x: TYPE assign set_x feature -- Settings set_x (a_x: like x) do instructions ensure x_set: verification end,,
Python,"def setBar(self, value): Tab instructions def getBar(self): Tab instructions Tab return value bar = property(getBar, setBar)[33]",def getBar(self): Tab instructions Tab return value bar = property(getBar),"def setBar(self, value): Tab instructions bar = property(fset = setBar)"
Visual Basic .NET,Property Bar() As type Get instructions Return value End Get Set (ByVal Value As type) instructions End Set End Property,ReadOnly Property Bar() As type Get instructions Return value End Get End Property,WriteOnly Property Bar() As type Set (ByVal Value As type) instructions End Set End Property
Xojo,ComputedProperty Bar() As type Get instructions Return value End Get Set (ByVal Value As type) instructions End Set End ComputedProperty,ComputedProperty Bar() As type Get instructions Return value End Get End ComputedProperty,ComputedProperty Bar() As type Set (value As type) instructions End Set End ComputedProperty
PHP,"function __get($property) { switch ($property) { case ,function __get($property) { switch ($property) { case ,"function __set($property, $value) { switch ($property) { case 
Perl,sub Bar { my $self = shift; if (my $Bar = shift) { # setter $self->{Bar} = $Bar; return $self; } else { # getter return $self->{Bar}; } },sub Bar { my $self = shift; if (my $Bar = shift) { # read-only die "Bar is read-only\n"; } else { # getter return $self->{Bar}; } },sub Bar { my $self = shift; if (my $Bar = shift) { # setter $self->{Bar} = $Bar; return $self; } else { # write-only die "Bar is write-only\n"; } }
Raku,colspan=3 ,,
Ruby,def bar instructions expression resulting in return value end def bar=(value) instructions end,def bar instructions expression resulting in return value end,def bar=(value) instructions end
Windows PowerShell,Add-Member «-MemberType »ScriptProperty «-Name »Bar «-Value »{ instructions ... return value } «-SecondValue »{ instructions } -InputObject variable,Add-Member «-MemberType »ScriptProperty «-Name »Bar «-Value »{ instructions ... return value} -InputObject variable,Add-Member «-MemberType »ScriptProperty «-Name »Bar -SecondValue { instructions } -InputObject variable
OCaml,colspan=3 ,,
F#,member this.Bar with get() = expression and set(value) = expression,member this.Bar = expression,member this.Bar with set(value) = expression
JavaScript (ES6),get bar(«parameters») { instructions ... return value}set bar(«parameters») { instructions },get bar(«parameters») { instructions ... return value},set bar(«parameters») { instructions }
COBOL,METHOD-ID. GET PROPERTY bar. DATA DIVISION. LINKAGE SECTION. return-var declaration PROCEDURE DIVISION RETURNING return-var. instructions END METHOD. METHOD-ID. SET PROPERTY bar. DATA DIVISION. LINKAGE SECTION. value-var declaration PROCEDURE DIVISION USING value-var. instructions END METHOD.,METHOD-ID. GET PROPERTY bar. DATA DIVISION. LINKAGE SECTION. return-var declaration PROCEDURE DIVISION RETURNING return-var. instructions END METHOD.,METHOD-ID. SET PROPERTY bar. DATA DIVISION. LINKAGE SECTION. value-var declaration PROCEDURE DIVISION USING value-var. instructions END METHOD.
Cobra,pro bar «as type» Tab get TabTab instructions TabTab return value Tab set TabTab instructions,get bar «as type» Tab instructions Tab return value,set bar «as type» Tab instructions
ISLISP,colspan=3 ,,
>>>>>>> ff4582384893868142f1b485861afa33c91d9c67
