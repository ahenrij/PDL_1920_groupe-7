<<<<<<< HEAD
! calling a function,basic/void function,value-returning function,required main function
Ada[1],foo «(parameters)»,procedure foo «(parameters)» is begin statements end foo,function foo «(parameters)» return type is begin statements end foo
ALGOL 68,foo«(parameters)»;,proc foo = «(parameters)» void: ( instructions );,proc foo = «(parameters)» rettype: ( instructions ...; retvalue );
APL,«parameters» foo parameters,foo?{ statements },foo?{ statements }
C (C99),foo(«parameters»),void foo(«parameters») { instructions },type foo(«parameters») { instructions ... return value; }
Objective-C,,,
C++ (STL),,,
Java,,,
D,,,
C#,,"Same as above; alternatively, if only one statement: void foo(«parameters») => statement;","Same as above; alternatively, if simple enough to be an expression: void foo(«parameters») => expression;"
JavaScript,,"function foo(«parameters») { instructions } or var foo = function («parameters») {instructions } or var foo = new Function («"parameter", ... ,"last parameter"» "instructions");",function foo(«parameters») { instructions ... return value; }
Go,,func foo(«parameters») { instructions },func foo(«parameters») type { instructions ... return value }
Swift,,func foo(«parameters») { instructions },func foo(«parameters») -> type { instructions ... return value }
Common Lisp,(foo «parameters»),(defun foo («parameters»)<dl><dd>instructions)</dd></dl> or (setf (symbol-function 'symbol)<dl><dd>function)</dd></dl>,(defun foo («parameters»)<dl><dd>...</dd><dd>value)</dd></dl>
Scheme,,(define (foo parameters) instructions) or (define foo (lambda (parameters) instructions)),(define (foo parameters) instructions... return_value) or (define foo (lambda (parameters) instructions... return_value))
ISLISP,,(defun foo («parameters»)<dl><dd>instructions)</dd></dl>,(defun foo («parameters»)<dl><dd>...</dd><dd>value)</dd></dl>
Pascal,foo«(parameters)»,procedure foo«(parameters)»; «forward;»forward declaration[a] «label<dl><dd>label declarations»</dd></dl> «const<dl><dd>constant declarations»</dd></dl> «type<dl><dd>type declarations»</dd></dl> «var<dl><dd>variable declarations»</dd></dl> «local function declarations» begin<dl><dd>instructions</dd></dl>end;,function foo«(parameters)»: type; «forward;»forward declaration[a] «label<dl><dd>label declarations»</dd></dl> «const<dl><dd>constant declarations»</dd></dl> «type<dl><dd>type declarations»</dd></dl> «var<dl><dd>variable declarations»</dd></dl> «local function declarations» begin<dl><dd> instructions; foo := value</dd></dl>end;
Visual Basic,Foo(«parameters»),Sub Foo«(parameters)»<dl><dd> instructions </dd></dl> End Sub,Function Foo«(parameters)»« As type»<dl><dd>instructions Foo = value</dd></dl>End Function
Visual Basic .NET,,,"Same as above; alternatively: Function Foo«(parameters)»« As type»<dl><dd>instructions Return value</dd></dl>End Function The As clause is not required if Option Strict is off. A type character may be used instead of the As clause. If control exits the function without a return value having been explicitly specified, the function returns the default value for the return type."
Xojo,,,
Python,foo(«parameters»),def foo(«parameters»): Tab instructions,def foo(«parameters»): Tab instructions Tab return value
S-Lang,foo(«parameters» «;qualifiers»),define foo («parameters») { instructions },define foo («parameters») { instructions ... return value; }
Fortran,foo («arguments») CALL sub_foo («arguments»)Fortran arguments[c],SUBROUTINE sub_foo («arguments») <dl><dd> instructions </dd></dl> END SUBROUTINEFortran arguments[c],type FUNCTION foo («arguments») <dl><dd> instructions ... foo = value </dd></dl> END FUNCTIONFortran arguments[c]
Forth,«parameters» FOO,: FOO « stack effect comment: ( before -- ) » <dl><dd> instructions </dd></dl> ;,: FOO « stack effect comment: ( before -- after ) » <dl><dd> instructions </dd></dl> ;
PHP,foo(«parameters»),function foo(«parameters») { instructions },function foo(«parameters») { instructions ... return value; }
Perl,foo(«parameters») or &foo«(parameters)»,sub foo { «my (parameters) = @_;» instructions },sub foo { «my (parameters) = @_;» instructions... «return» value; }
Raku,foo(«parameters») or &foo«(parameters)»,«multi »sub foo(parameters) { instructions },«our «type» »«multi »sub foo(parameters) { instructions... «return» value; }
Ruby,foo«(parameters)»,def foo«(parameters)» <dl><dd>instructions </dd></dl> end,def foo«(parameters)» <dl><dd>instructions «return» value </dd></dl> end
Rust,foo(«parameters»),fn foo(«parameters») { instructions },fn foo(«parameters») -> type { instructions }
Scala,foo«(parameters)»,def foo«(parameters)»«: Unit =» { instructions },def foo«(parameters)»«: type» = { instructions ... «return» value }
Windows PowerShell,foo «parameters»,function foo { instructions }; or function foo { «param(parameters)» instructions },function foo «(parameters)» { instructions … return value }; or function foo { «param(parameters)» instructions … return value }
Bash shell,foo «parameters»,<poem>function foo { 4instructions  or foo () { 4instructions </poem>,<poem>function foo { 4instructions 4return «exit_code»  or foo () { 4instructions 4return «exit_code» </poem>
,,"parameters $n ($1, $2, $3, ...) $@ (all parameters) $# (the number of parameters) $0 (this function name)",
OCaml,foo parameters,let «rec» foo parameters = instructions,let «rec» foo parameters = instructions... return_value
F#,,,
Standard ML,,fun foo parameters = ( instructions ),fun foo parameters = ( instructions... return_value )
Haskell,,foo parameters = do Tab instructions,foo parameters = return_value or foo parameters = do Tab instructions Tab return value
Eiffel,foo («parameters»),foo («parameters») <dl><dd>require <dl><dd>preconditions</dd></dl> do <dl><dd>instructions</dd></dl> ensure <dl><dd>postconditions</dd></dl> end</dd></dl>,foo («parameters»): type <dl><dd>require <dl><dd>preconditions</dd></dl> do <dl><dd>instructions</dd><dd>Result := value</dd></dl> ensure <dl><dd>postconditions</dd></dl> end</dd></dl>
CoffeeScript,foo(),foo = ->,foo = -> value
,foo parameters,foo = () ->,foo = ( parameters ) -> value
COBOL,CALL "foo" «USING parameters» <dl><dd> «exception-handling» </dd></dl> «END-CALL»COBOL calling programs[d],«IDENTIFICATION DIVISION.» PROGRAM-ID. foo. «other divisions...» PROCEDURE DIVISION «USING parameters». <dl><dd> instructions.</dd></dl>,«IDENTIFICATION DIVISION.» PROGRAM-ID/FUNCTION-ID. foo. «other divisions...» DATA DIVISION. «other sections...» LINKAGE SECTION. «parameter definitions...» variable-to-return definition «other sections...» PROCEDURE DIVISION «USING parameters» RETURNING variable-to-return. <dl><dd> instructions.</dd></dl>
,«FUNCTION» foo«(«parameters»)»,,
=======
,read from,write to,
,stdin,stdout,stderr
Ada[1],Get (x),Put (x),"Put (Standard_Error, x)"
ALGOL 68,"readf(($format$, x)); or getf(stand in, ($format$, x));","printf(($format$, x)); or putf(stand out, ($format$, x));","putf(stand error, ($format$, x));ALGOL Unformatted[a]"
APL,x??,??x,??x
C (C99),"scanf(format, &x); or fscanf(stdin, format, &x); more c input[b]","printf( format, x); or fprintf(stdout, format, x); more c output[c]","fprintf(stderr, format, x );more c error output[d]"
Objective-C,data = [[NSFileHandle fileHandleWithStandardInput] readDataToEndOfFile];,[[NSFileHandle fileHandleWithStandardOutput] writeData:data];,[[NSFileHandle fileHandleWithStandardError] writeData:data];
C++,"«std::»cin >> x; or «std::»getline(«std::»cin, str);",«std::»cout << x;,«std::»cerr << x; or «std::»clog << x;
C#,x = Console.Read(); orx = Console.ReadLine();,"Console.Write(«format, »x); or Console.WriteLine(«format, »x);","Console.Error<wbr/>.Write(«format, »x); or Console.Error<wbr/>.WriteLine(«format, »x);"
D,x = std.stdio.readln(),"std.stdio.write(x) or std.stdio.writeln(x) or std.stdio.writef(format, x) or std.stdio.writefln(format, x)","stderr.write(x) or stderr.writeln(x) or std.stdio<wbr/>.writef(stderr, format, x) or std.stdio<wbr/>.writefln(stderr, format, x)"
Java,x = System.in.read(); or x = new Scanner(System.in)<wbr/>.nextInt(); or x = new Scanner(System.in)<wbr/>.nextLine();,"System.out.print(x); or System.out.printf(format, x); or System.out.println(x);","System.err.print(x); or System.err.printf(format, x); or System.err.println(x);"
Go,"fmt.Scan(&x) or fmt.Scanf(format, &x) or x = bufio.NewReader(os.Stdin)<wbr/>.ReadString('\n')","fmt.Println(x) or fmt.Printf(format, x)","fmt.Fprintln(os.Stderr, x) or fmt.Fprintf(os.Stderr, format, x)"
Swift,x = readLine() (2.x),print(x) (2.x) println(x) (1.x),
JavaScript Web Browser implementation,,document.write(x),
JavaScript Active Server Pages,,Response.Write(x),
JavaScript Windows Script Host,x = WScript.StdIn.Read(chars) or x = WScript.StdIn.ReadLine(),WScript.Echo(x) or WScript.StdOut.Write(x) or WScript.StdOut.WriteLine(x),WScript.StdErr.Write(x) or WScript.StdErr.WriteLine(x)
Common Lisp,(setf x (read-line)),(princ x) or (format t format x),(princ x *error-output*) or (format *error-output* format x)
Scheme (R6RS),(define x (read-line)),(display x) or (format #t format x),(display x (current-error-port)) or (format (current-error-port) format x)
ISLISP,(setf x (read-line)),(format (standard-output) format x),(format (error-output) format x)
Pascal,read(x); or readln(x);,write(x); or writeln(x);,"write(stderr, x); or writeln(stderr, x);"
Visual Basic,"Input« prompt,» x",Print x or ? x,
Visual Basic .NET,x = Console.Read() or x = Console.ReadLine(),"Console.Write(«format, »x) or Console.WriteLine(«format, »x)","Console.Error<wbr/>.Write(«format, »x) or Console.Error<wbr/>.WriteLine(«format, »x)"
Xojo,x = StandardInputStream.Read() or x = StandardInputStreame.ReadLine(),StandardOutputStream.Write(x) or StandardOutputStream.WriteLine(x),StdErr.Write(x) or StdErr.WriteLine(x)
Python 2.x,x = raw_input(«prompt»),print x or sys.stdout.write(x),"print >> sys.stderr, x or sys.stderr.write(x)"
Python 3.x,x = input(«prompt»),"print(x«, end=""»)","print(x«, end=""», file=sys.stderr)"
S-Lang,"fgets (&x, stdin)","fputs (x, stdout)","fputs (x, stderr)"
Fortran,"READ(*,format) variable names or READ(INPUT_UNIT,format) variable namesFortran standard units[e]","WRITE(*,format) expressions or WRITE(OUTPUT_UNIT,format) expressionsFortran standard units[e]","WRITE(ERROR_UNIT,format) expressionsFortran standard units[e]"
Forth,buffer length ACCEPT ( # chars read ) KEY ( char ),buffer length TYPE char EMIT,
PHP,"$x = fgets(STDIN); or $x = fscanf(STDIN, format);","print x; or echo x; or printf(format, x);","fprintf(STDERR, format, x);"
Perl,$x = <>; or $x = <STDIN>;,"print x; or printf format, x;","print STDERR x; or printf STDERR format, x;"
Raku,$x = $*IN.get;,x.print or x.say,x.note or $*ERR.print(x) or $*ERR.say(x)
Ruby,x = gets,"puts x or printf(format, x)","$stderr.puts(x) or $stderr.printf(format, x)"
Windows PowerShell,$x = Read-Host«« -Prompt» text»; or $x = [Console]::Read(); or $x = [Console]::ReadLine(),x; or Write-Output x; or echo x,Write-Error x
OCaml,let x = read_int () or let str = read_line () or Scanf.scanf format (fun x ... -> ...),print_int x or print_endline str or Printf.printf format x ...,prerr_int x or prerr_endline str or Printf.eprintf format x ...
F#,let x = System.Console<wbr/>.ReadLine(),printf format x ... or printfn format x ...,eprintf format x ... or eprintfn format x ...
Standard ML,val str = TextIO.inputLIne TextIO.stdIn,print str,"TextIO.output (TextIO.stdErr, str)"
Haskell (GHC),x <- readLn or str <- getLine,print x or putStrLn str,hPrint stderr x or hPutStrLn stderr str
COBOL,ACCEPT x,DISPLAY x,
>>>>>>> ff4582384893868142f1b485861afa33c91d9c67
