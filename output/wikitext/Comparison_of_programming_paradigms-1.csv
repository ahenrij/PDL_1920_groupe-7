<<<<<<< HEAD
Imperative,Procedural,Object-oriented
load r;                      1
 r2 = r * r;                  2
 result = r2 * "3.142";       3
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.... storage .............
result variable
constant "3.142","area proc(r2,res):
   push stack                                 5
   load r2;                                   6
   r3 = r2 * r2;                              7
   res = r3 * "3.142";                        8
   pop stack                                  9
   return;                                   10
...............................................
main proc:
   load r;                                    1
   call area(r,result);
    +load p = address of parameter list;      2
    +load v = address of subroutine 'area';   3
    +goto v with return;                      4
.
.
.
.
.... storage .............
result variable
constant "3.142"
parameter list variable
function pointer (==>area)
stack storage","circle.area method(r2):
   push stack                                 7
   load r2;                                   8
   r3 = r2 * r2;                              9
   res = r3 * "3.142";                       10
   pop stack                                 11
   return(res);                           12,13
...............................................
main proc:
   load r;                                    1
   result = circle.area(r);
      +allocate heap storage;                 2[16]
      +copy r to message;                     3
      +load p = address of message;           4
      +load v = addr. of method 'circle.area' 5
      +goto v with return;                    6
.
.
.... storage .............
result variable (assumed pre-allocated)
immutable variable "3.142" (final)
(heap) message variable for circle method call
vtable(==>area)
stack storage"
=======
Paradigm,Description,Main traits,Related paradigm(s),Critique,Examples
Imperative,Programs as statements that directly change computed state (datafields),"Direct assignments, common data structures, global variables",,"Edsger W. Dijkstra, Michael A. Jackson","C, C++, Java, Kotlin, PHP, Python, Ruby, Wolfram Language"
Structured,A style of imperative programming with more logical program structure,"Structograms, indentation, no or limited use of goto statements",Imperative,,"C, C++, Java, Kotlin, Pascal, PHP, Python, Wolfram Language"
Procedural,"Derived from structured programming, based on the concept of modular programming or the procedure call","Local variables, sequence, selection, iteration, and modularization","Structured, imperative",,"C, C++, Lisp, PHP, Python, Wolfram Language"
Functional,Treats computation as the evaluation of mathematical functions avoiding state and mutable data,"Lambda calculus, compositionality, formula, recursion, referential transparency, no side effects",Declarative,,"C++[1], C#[2], Clojure, Coffeescript[3], Elixir, Erlang, F#, Haskell, Java (since version 8), Kotlin, Lisp, Python, R,[4] Ruby, Scala, SequenceL, Standard ML, JavaScript, Elm, Wolfram Language"
Event-driven including time-driven,"Control flow is determined mainly by events, such as mouse clicks or interrupts including timer","Main loop, event handlers, asynchronous processes","Procedural, dataflow",,"JavaScript, ActionScript, Visual Basic, Elm"
Object-oriented,Treats datafields as objects manipulated through predefined methods only,"Objects, methods, message passing, information hiding, data abstraction, encapsulation, polymorphism, inheritance, serialization-marshalling",Procedural,"Wikipedia, others[5][6][7]","Common Lisp, C++, C#, Eiffel, Java, Kotlin, PHP, Python, Ruby, Scala, JavaScript[8][9]"
Declarative,"Defines program logic, but not detailed control flow","Fourth-generation languages, spreadsheets, report program generators",,,"SQL, regular expressions, Prolog, OWL, SPARQL, XSLT"
Automata-based programming,Treats programs as a model of a finite state machine or any other formal automata,"State enumeration, control variable, state changes, isomorphism, state transition table","Imperative, event-driven",,Abstract State Machine Language
>>>>>>> ff4582384893868142f1b485861afa33c91d9c67
